// This file is automatically generated. Do not edit it directly.
import { createClient, Session } from '@supabase/supabase-js';
import type { Database } from './types';

// Runtime configuration with validation
const getSupabaseConfig = () => {
  const url = import.meta.env.VITE_SUPABASE_URL;
  const key = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;
  
  if (!url) {
    throw new Error('Missing VITE_SUPABASE_URL environment variable');
  }
  
  if (!key) {
    throw new Error('Missing VITE_SUPABASE_PUBLISHABLE_KEY environment variable');
  }
  
  // Validate URL format
  try {
    new URL(url);
  } catch (error) {
    throw new Error(`Invalid VITE_SUPABASE_URL format: ${url}`);
  }
  
  return { url, key };
};

const { url: SUPABASE_URL, key: SUPABASE_PUBLISHABLE_KEY } = getSupabaseConfig();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true
  },
  global: {
    headers: {
      'x-client-info': 'lovable-app'
    }
  }
});

/**
 * Ensures the current session is properly set on the Supabase client
 * Returns true if session is valid and set, false otherwise
 */
export const ensureAuthenticatedSession = async (session: any): Promise<boolean> => {
  if (!session?.access_token) {
    console.error('No valid session provided');
    return false;
  }

  try {
    // Set the session on the existing client
    await supabase.auth.setSession({
      access_token: session.access_token,
      refresh_token: session.refresh_token
    });
    
    console.log('Session set successfully on client');
    return true;
  } catch (error) {
    console.error('Failed to set session on client:', error);
    return false;
  }
};

// Utility function to set session token on the main client (kept for compatibility)
export const setSupabaseSession = async (session: any) => {
  if (!session?.access_token) {
    console.warn('No session token provided');
    return supabase;
  }

  try {
    console.log('Setting session on Supabase client...');
    
    // Set the session on the existing client instance
    const { data, error } = await supabase.auth.setSession({
      access_token: session.access_token,
      refresh_token: session.refresh_token
    });
    
    if (error) {
      console.error('Error setting session on client:', error);
      throw error;
    }
    
    console.log('Session set successfully, user:', data.user?.id);
    
    return supabase;
  } catch (error) {
    console.error('Failed to set session:', error);
    throw error;
  }
};

// Function to clear invalid session data from localStorage
const clearInvalidSessionData = () => {
  try {
    // Extract project ID from URL for dynamic localStorage key
    const projectId = SUPABASE_URL.match(/https:\/\/([^.]+)\.supabase\.co/)?.[1];
    if (projectId) {
      localStorage.removeItem(`sb-${projectId}-auth-token`);
    }
    localStorage.removeItem('supabase.auth.token');
    Object.keys(localStorage).forEach(key => {
      if (key.includes('supabase') || key.includes('auth')) {
        localStorage.removeItem(key);
      }
    });
    console.log('Cleared invalid session data from localStorage');
  } catch (error) {
    console.error('Error clearing session data:', error);
  }
};

// Validate session and refresh if needed
export const validateAndRefreshSession = async (): Promise<Session | null> => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Session validation error:', error);
      // Clear invalid tokens on specific errors
      if (error.message?.includes('refresh_token_not_found') || 
          error.message?.includes('Invalid Refresh Token')) {
        console.warn('Invalid refresh token detected, clearing session data');
        clearInvalidSessionData();
      }
      return null;
    }

    if (!session) {
      console.warn('No active session found');
      return null;
    }

    // Check if session is expired or about to expire (within 5 minutes)
    const expiresAt = session.expires_at ? session.expires_at * 1000 : 0;
    const fiveMinutesFromNow = Date.now() + (5 * 60 * 1000);

    if (expiresAt <= fiveMinutesFromNow) {
      console.log('Session expired or expiring soon, refreshing...');
      const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
      
      if (refreshError) {
        console.error('Session refresh error:', refreshError);
        // Clear invalid tokens on refresh failure
        if (refreshError.message?.includes('refresh_token_not_found') || 
            refreshError.message?.includes('Invalid Refresh Token')) {
          clearInvalidSessionData();
        }
        return null;
      }

      return refreshData.session;
    }

    return session;
  } catch (error) {
    console.error('Session validation failed:', error);
    clearInvalidSessionData();
    return null;
  }
};