// This file is automatically generated. Do not edit it directly.
import { createClient, Session } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ijvhqqdfthchtittyvnt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlqdmhxcWRmdGhjaHRpdHR5dm50Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxOTE4OTMsImV4cCI6MjA2ODc2Nzg5M30.wxyInat54wVrwFQvbk61Hf7beu84TnhrBg0Bkpmo6fA";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true
  },
  global: {
    headers: {
      'x-client-info': 'lovable-app'
    }
  }
});

// Utility function to set session token on the main client
export const setSupabaseSession = async (session: any) => {
  if (!session?.access_token) {
    console.warn('No session token provided');
    return supabase;
  }

  // Set the session on the existing client instance
  await supabase.auth.setSession(session);
  return supabase;
};

// Validate session and refresh if needed
export const validateAndRefreshSession = async (): Promise<Session | null> => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Session validation error:', error);
      return null;
    }

    if (!session) {
      console.warn('No active session found');
      return null;
    }

    // Check if session is expired or about to expire (within 5 minutes)
    const expiresAt = session.expires_at ? session.expires_at * 1000 : 0;
    const fiveMinutesFromNow = Date.now() + (5 * 60 * 1000);

    if (expiresAt <= fiveMinutesFromNow) {
      console.log('Session expired or expiring soon, refreshing...');
      const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
      
      if (refreshError) {
        console.error('Session refresh error:', refreshError);
        return null;
      }

      return refreshData.session;
    }

    return session;
  } catch (error) {
    console.error('Session validation failed:', error);
    return null;
  }
};