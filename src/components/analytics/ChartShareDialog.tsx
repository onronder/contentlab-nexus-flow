import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, Copy, Mail, Share, Clock } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";
import { createShare, createSchedule, sendChartEmail } from "@/services/reportingService";

interface ChartShareDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  chartTitle: string;
  chartData: any;
  chartConfig: any;
}

export function ChartShareDialog({ 
  open, 
  onOpenChange, 
  chartTitle, 
  chartData, 
  chartConfig 
}: ChartShareDialogProps) {
  const [activeTab, setActiveTab] = useState<"share" | "schedule" | "email">("share");
  const [isPublic, setIsPublic] = useState(true);
  const [expiresAt, setExpiresAt] = useState<Date>();
  const [shareUrl, setShareUrl] = useState("");
  const [emailRecipients, setEmailRecipients] = useState("");
  const [emailSubject, setEmailSubject] = useState(`Chart Report: ${chartTitle}`);
  const [emailBody, setEmailBody] = useState("");
  const [scheduleRecipients, setScheduleRecipients] = useState("");
  const [scheduleCadence, setScheduleCadence] = useState("daily");
  const [scheduleFormat, setScheduleFormat] = useState("png");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleCreateShare = async () => {
    try {
      setLoading(true);
      const payload = {
        title: chartTitle,
        data: chartData,
        config: chartConfig,
        generatedAt: new Date().toISOString()
      };

      const token = await createShare({
        chart_title: chartTitle,
        payload,
        expires_at: expiresAt?.toISOString()
      });

      const url = `${window.location.origin}/share/${token}`;
      setShareUrl(url);
      
      toast({
        title: "Share link created",
        description: "Your chart share link has been generated successfully."
      });
    } catch (error) {
      toast({
        title: "Error creating share link",
        description: "Failed to create share link. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCopyUrl = () => {
    navigator.clipboard.writeText(shareUrl);
    toast({
      title: "Link copied",
      description: "Share link copied to clipboard."
    });
  };

  const handleSendEmail = async () => {
    try {
      setLoading(true);
      const recipients = emailRecipients.split(',').map(email => email.trim());
      
      await sendChartEmail({
        recipients,
        subject: emailSubject,
        html: `
          <h2>${chartTitle}</h2>
          ${emailBody ? `<p>${emailBody}</p>` : ''}
          <p>This report was generated on ${format(new Date(), 'PPP')}.</p>
          <p><em>Generated by Analytics Dashboard</em></p>
        `,
        text: `${chartTitle}\n\n${emailBody}\n\nGenerated on ${format(new Date(), 'PPP')}`
      });

      toast({
        title: "Email sent",
        description: `Chart report sent to ${recipients.length} recipient(s).`
      });
      
      setEmailRecipients("");
      setEmailBody("");
    } catch (error) {
      toast({
        title: "Error sending email",
        description: "Failed to send email. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCreateSchedule = async () => {
    try {
      setLoading(true);
      const recipients = scheduleRecipients.split(',').map(email => email.trim());
      const payload = {
        title: chartTitle,
        data: chartData,
        config: chartConfig
      };

      await createSchedule({
        recipients,
        subject: `Scheduled Report: ${chartTitle}`,
        html: `<h2>${chartTitle}</h2><p>Your scheduled chart report.</p>`,
        format: scheduleFormat,
        cadence: scheduleCadence as "daily" | "weekly" | "monthly",
        payload
      });

      toast({
        title: "Schedule created",
        description: `Report will be sent ${scheduleCadence} to ${recipients.length} recipient(s).`
      });
      
      setScheduleRecipients("");
    } catch (error) {
      toast({
        title: "Error creating schedule",
        description: "Failed to create schedule. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Share Chart</DialogTitle>
        </DialogHeader>

        <div className="flex border-b">
          <Button
            variant={activeTab === "share" ? "default" : "ghost"}
            className="flex-1 rounded-none"
            onClick={() => setActiveTab("share")}
          >
            <Share className="h-4 w-4 mr-2" />
            Share
          </Button>
          <Button
            variant={activeTab === "email" ? "default" : "ghost"}
            className="flex-1 rounded-none"
            onClick={() => setActiveTab("email")}
          >
            <Mail className="h-4 w-4 mr-2" />
            Email
          </Button>
          <Button
            variant={activeTab === "schedule" ? "default" : "ghost"}
            className="flex-1 rounded-none"
            onClick={() => setActiveTab("schedule")}
          >
            <Clock className="h-4 w-4 mr-2" />
            Schedule
          </Button>
        </div>

        <div className="space-y-4 mt-4">
          {activeTab === "share" && (
            <>
              <div className="flex items-center justify-between">
                <Label htmlFor="public">Public access</Label>
                <Switch
                  id="public"
                  checked={isPublic}
                  onCheckedChange={setIsPublic}
                />
              </div>

              <div className="space-y-2">
                <Label>Expires at (optional)</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !expiresAt && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {expiresAt ? format(expiresAt, "PPP") : "No expiration"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={expiresAt}
                      onSelect={setExpiresAt}
                      disabled={(date) => date < new Date()}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              {shareUrl && (
                <div className="space-y-2">
                  <Label>Share URL</Label>
                  <div className="flex gap-2">
                    <Input value={shareUrl} readOnly className="flex-1" />
                    <Button size="sm" onClick={handleCopyUrl}>
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              )}

              <Button 
                onClick={handleCreateShare} 
                disabled={loading}
                className="w-full"
              >
                {shareUrl ? "Regenerate Link" : "Create Share Link"}
              </Button>
            </>
          )}

          {activeTab === "email" && (
            <>
              <div className="space-y-2">
                <Label htmlFor="recipients">Recipients</Label>
                <Input
                  id="recipients"
                  placeholder="email1@example.com, email2@example.com"
                  value={emailRecipients}
                  onChange={(e) => setEmailRecipients(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="subject">Subject</Label>
                <Input
                  id="subject"
                  value={emailSubject}
                  onChange={(e) => setEmailSubject(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="body">Message (optional)</Label>
                <Textarea
                  id="body"
                  placeholder="Add a custom message..."
                  value={emailBody}
                  onChange={(e) => setEmailBody(e.target.value)}
                  rows={3}
                />
              </div>

              <Button 
                onClick={handleSendEmail} 
                disabled={loading || !emailRecipients.trim()}
                className="w-full"
              >
                Send Email
              </Button>
            </>
          )}

          {activeTab === "schedule" && (
            <>
              <div className="space-y-2">
                <Label htmlFor="schedule-recipients">Recipients</Label>
                <Input
                  id="schedule-recipients"
                  placeholder="email1@example.com, email2@example.com"
                  value={scheduleRecipients}
                  onChange={(e) => setScheduleRecipients(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="cadence">Frequency</Label>
                <Select value={scheduleCadence} onValueChange={setScheduleCadence}>
                  <SelectTrigger id="cadence">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="daily">Daily</SelectItem>
                    <SelectItem value="weekly">Weekly</SelectItem>
                    <SelectItem value="monthly">Monthly</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="format">Format</Label>
                <Select value={scheduleFormat} onValueChange={setScheduleFormat}>
                  <SelectTrigger id="format">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="png">PNG Image</SelectItem>
                    <SelectItem value="pdf">PDF Document</SelectItem>
                    <SelectItem value="csv">CSV Data</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Button 
                onClick={handleCreateSchedule} 
                disabled={loading || !scheduleRecipients.trim()}
                className="w-full"
              >
                Create Schedule
              </Button>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}